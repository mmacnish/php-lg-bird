log "/var/log/bird" all;

define host_as = 46450;
define route_server_as = 46450;
define my_public_ip = 1.2.3.4;
define my_private_ip = 1.2.4.3;

router id 1.2.3.4;

function is_blackhole()
{
  return dest = RTD_BLACKHOLE;
}

# Did this route originate from a n
function is_vminterface()
{
  return ifname ~ "SRVID*";
}

/**
  We only want to accept routes that have a next hop of a virtual machine
  aka, ifname matches SRVID*
**/
filter accept_vmintefaces
{
  if is_blackhole() then
    reject;
  if ! is_vminterface() then
    reject;
  accept;
}

/**
  We want to tag any virtual machine static routes with 64515:33 so we can recognize
  and filter them later on
**/
filter tag_vm_routes_no_full_table
{
  if source = RTS_INHERIT then
    bgp_community.add((host_as,33));

  # We also don't want to readvertise the full table upstream
  if (host_as, 44) ~ bgp_community then
    reject;

  accept;
}

/**
  We want to tag any routes we receive from our upstream edges
  These are the "full table" of BGP routes, and will be what we deliver to guests
**/
filter tag_full_table
{
  # Don't give customers our host routes
  if (host_as,33) ~ bgp_community then
    reject;

  bgp_community.add((host_as,44));

  accept;
}

filter only_full_tables
{
  if ! ((host_as, 44) ~ bgp_community) then
    reject;

  if (host_as, 33) ~ bgp_community then
    reject;

  if net.len > 24 then
    reject;

  accept;
}

filter not_full_table
{
  if (host_as, 44) ~ bgp_community then
    reject;

  accept;
}

/**
  We want to monitor any kernel level routes that have been added
  But, we don't want to add any routes that we may get from BGP
**/
protocol kernel
{
  export filter not_full_table;
  import filter accept_vmintefaces;
  scan time 5;
  learn yes;
}

# Let BIRD scan the interfaces for changes
protocol device
{
  scan time 5;
}

protocol bfd
{
  /**
    For customer BGP sessions, we only want to enable BFD
    if they have their side configured
  **/
  interface "SRVID*"
  {
    passive yes;
  };

  /**
    For RR's, we really don't want to be sending packets every 10ms
    (which is the default).  This is too much traffic in our larger locations
  **/
  interface "VM*"
  {
    interval 250ms;
    multiplier 10;
  };
}

template bgp EDGES
{
  local as host_as;
  source address my_public_ip;
  import filter tag_full_table;
  export filter tag_vm_routes_no_full_table;
  multihop 254;
  graceful restart on;
  bfd yes;
  connect retry time 15;
  error wait time 5, 300;
  add paths on;

  /**
    In order to ensure that customers can see other customers BGP announcements,
    we need to allow BGP paths where our ASN appears in the path at least once.
  **/
  allow local as 1;
}

protocol bgp jfk00 from EDGES
{
  description "edge01";
  neighbor 4.3.2.1 as route_server_as;
}

define martians = [ 169.254.0.0/16+, 172.16.0.0/12+, 192.168.0.0/16+, 10.0.0.0/8+,
    127.0.0.0/8+, 224.0.0.0/4+, 240.0.0.0/4+, 0.0.0.0/32-, 0.0.0.0/0{0,7} ];

define customer_bgp_ip = 169.254.169.254;

function rt_import(int asn; prefix set peer_nets) {
  if net ~ martians then return false;
  if ! (net ~ peer_nets) then return false;
  if bgp_path.last != asn then return false;
  if bgp_path.first != asn then return false;
  if bgp_path.len > 64 then return false;
  if bgp_next_hop != from then return false;

  # We're only using 46450:4000 for v4 and v6
  bgp_community.add((46450,4000));

  /**
    We need to be able to filter these routes, so we tag them with
    46450:7000, so the route server knows to not re-import them from the
    full table
  **/
  bgp_community.add((46450,7000));

  /**
    Don't allow customers to inject any of our internal communities
  **/
  bgp_community.delete([(host_as,*)]);
  bgp_community.delete([(route_server_as,*)]);
  return true;
}

/**
  We're going to be using this for customer BGP.  This function allows multiple ASNs to be used.
  We're keeping the old rt_import around for awhile so we don't break all the configs right away
**/
function rt_import_multi(int asn; int set peer_asns; prefix set peer_nets) {
  if net ~ martians then return false;
  if ! (net ~ peer_nets) then return false;

  /**
    Customers can only give us AS paths that contain ASNs they're
    allowed to use.
    .filter will remove any unrecognized ASNs
  **/
  bgp_path.filter(peer_asns);
  if ! (bgp_path.last ~ peer_asns) then return false;
  if bgp_path.first != asn then return false;
  if bgp_path.len > 64 then return false;
  if bgp_next_hop != from then return false;

  # We're only using 46450:4000 for v4 and v6
  bgp_community.add((46450,4000));

  /**
    We need to be able to filter these routes, so we tag them with
    46450:7000, so the route server knows to not re-import them from the full table
  **/
  bgp_community.add((46450,7000));

  # Don't allow customers to inject any of our internal communities
  bgp_community.delete([(host_as,*)]);
  bgp_community.delete([(route_server_as,*)]);
  return true;
}

template bgp CUSTOMERS
{
  local as host_as;
  source address customer_bgp_ip;
  import none;
  import limit 1000;
  # Store any routes we reject due to filters.  These can be retrieved via 'birdc show route filtered'
  import keep filtered;
  export filter only_full_tables;
  graceful restart on;
  multihop 5;
}


# And this one is used by the automation around customers running BGP
include "/etc/bird.d/*.conf";
